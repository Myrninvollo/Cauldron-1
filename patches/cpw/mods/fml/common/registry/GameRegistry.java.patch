--- ../src-base/minecraft/cpw/mods/fml/common/registry/GameRegistry.java
+++ ../src-work/minecraft/cpw/mods/fml/common/registry/GameRegistry.java
@@ -19,6 +19,7 @@
 import java.util.Set;
 import java.util.logging.Level;
 
+import net.minecraft.block.Block;
 import net.minecraft.entity.item.EntityItem;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.inventory.IInventory;
@@ -50,6 +51,11 @@
 import cpw.mods.fml.common.LoaderState;
 import cpw.mods.fml.common.ModContainer;
 import cpw.mods.fml.common.ObfuscationReflectionHelper;
+// Cauldron start
+import java.util.HashMap;
+import net.minecraft.entity.player.EntityPlayerMP;
+import org.bukkit.Location;
+// Cauldron end
 
 public class GameRegistry
 {
@@ -59,6 +65,10 @@
     private static List<ICraftingHandler> craftingHandlers = Lists.newArrayList();
     private static List<IPickupNotifier> pickupHandlers = Lists.newArrayList();
     private static List<IPlayerTracker> playerTrackers = Lists.newArrayList();
+    // Cauldron start
+    private static Map<String, Boolean> configWorldGenCache = new HashMap<String, Boolean>();
+    private static Map<String, String> worldGenMap = new HashMap<String, String>();
+    // Cauldron end
 
     /**
      * Register a world generator - something that inserts new block types into the world
@@ -67,7 +77,13 @@
      */
     public static void registerWorldGenerator(IWorldGenerator generator)
     {
+        // Cauldron start - mod id's are not available during generateWorld so we must capture them here
+        String modId = Loader.instance().activeModContainer().getModId();
+        modId = modId.replaceAll("[^A-Za-z0-9]", ""); // remove all non-digits/alphanumeric
+        modId.replace(" ", "_");
         worldGenerators.add(generator);
+        worldGenMap.put(generator.getClass().getName(), modId);
+        // Cauldron end
     }
 
     /**
@@ -88,14 +104,62 @@
         long zSeed = fmlRandom.nextLong() >> 2 + 1L;
         long chunkSeed = (xSeed * chunkX + zSeed * chunkZ) ^ worldSeed;
 
+        // Cauldron start
+        boolean before = true;
+        if (world instanceof net.minecraft.world.WorldServer) // ignore fake worlds
+        {
+            before = ((net.minecraft.world.WorldServer)world).theChunkProviderServer.loadChunkOnProvideRequest; // store value
+            ((net.minecraft.world.WorldServer)world).theChunkProviderServer.loadChunkOnProvideRequest = true; // load chunks on provide requests
+        }
         for (IWorldGenerator generator : worldGenerators)
         {
-            fmlRandom.setSeed(chunkSeed);
-            generator.generate(fmlRandom, chunkX, chunkZ, world, chunkGenerator, chunkProvider);
+            if (!configWorldGenCache.containsKey(generator.getClass().getName()))
+            {
+                String modId = worldGenMap.get(generator.getClass().getName());
+                String generatorName = "";
+                generatorName = modId + "-" + generator.getClass().getSimpleName();
+                boolean generatorEnabled = world.cauldronConfig.getBoolean("worldgen-" + generatorName, true);
+                configWorldGenCache.put(generator.getClass().getName(), generatorEnabled);
+            }
+            if (configWorldGenCache.get(generator.getClass().getName()))
+            {
+                fmlRandom.setSeed(chunkSeed);
+                generator.generate(fmlRandom, chunkX, chunkZ, world, chunkGenerator, chunkProvider);
+            }
         }
+
+        if (world instanceof net.minecraft.world.WorldServer) // ignore fake worlds
+        {
+            ((net.minecraft.world.WorldServer)world).theChunkProviderServer.loadChunkOnProvideRequest = before; // reset
+        }
+        // Cauldron end
     }
 
     /**
+     * Internal method for creating an @Block instance
+     * @param container
+     * @param type
+     * @param annotation
+     * @throws Exception
+     */
+    public static Object buildBlock(ModContainer container, Class<?> type, Block annotation) throws Exception
+    {
+        Object o = type.getConstructor(int.class).newInstance(findSpareBlockId());
+        registerBlock((net.minecraft.block.Block) o);
+        return o;
+    }
+
+    /**
+     * Private and not yet working properly
+     *
+     * @return a block id
+     */
+    private static int findSpareBlockId()
+    {
+        return BlockTracker.nextBlockId();
+    }
+
+    /**
      * Register an item with the item registry with a custom name : this allows for easier server->client resolution
      *
      * @param item The item to register
@@ -115,10 +179,22 @@
      */
     public static void registerItem(net.minecraft.item.Item item, String name, String modId)
     {
+        GameRegistry.registerMaterial(item, name, modId); // Cauldron - register bukkit material
         GameData.setName(item, name, modId);
     }
 
     /**
+     * Register a block with the world
+     *
+     */
+    @Deprecated
+    public static void registerBlock(net.minecraft.block.Block block)
+    {
+        registerBlock(block, ItemBlock.class);
+    }
+
+
+    /**
      * Register a block with the specified mod specific name : overrides the standard type based name
      * @param block The block to register
      * @param name The mod-unique name to register it as
@@ -127,7 +203,21 @@
     {
         registerBlock(block, ItemBlock.class, name);
     }
+
     /**
+     * Register a block with the world, with the specified item class
+     *
+     * Deprecated in favour of named versions
+     *
+     * @param block The block to register
+     * @param itemclass The item type to register with it
+     */
+    @Deprecated
+    public static void registerBlock(net.minecraft.block.Block block, Class<? extends ItemBlock> itemclass)
+    {
+        registerBlock(block, itemclass, null);
+    }
+    /**
      * Register a block with the world, with the specified item class and block name
      * @param block The block to register
      * @param itemclass The item type to register with it
@@ -177,6 +267,33 @@
         blockRegistry.put(Loader.instance().activeModContainer(), (BlockProxy) block);
     }
 
+    // Cauldron start - register bukkit material names for modded items/blocks
+    /**
+     * Register the specified Material with a mod specific name : overrides the standard type XID name
+     * @param item The material to register
+     * @param name The material-unique name to register it as - null will default to modId_itemId
+     * @param modId An optional modId that will "own" this block - generally used by multi-mod systems
+     * where one mod should "own" all the blocks of all the mods, null defaults to the active mod
+     */
+    public static void registerMaterial(net.minecraft.item.Item item, String name, String modId)
+    {
+        if (name != null)
+        {
+            if (modId == null)
+               modId = Loader.instance().activeModContainer().getModId();
+            String materialName = modId + "_" + name;
+            org.bukkit.Material.setMaterialName(item.itemID, materialName, false);
+        }
+        else 
+        {
+            if (modId == null)
+                modId = Loader.instance().activeModContainer().getModId();
+            String materialName = modId + "_" + String.valueOf(item.itemID);
+            org.bukkit.Material.setMaterialName(item.itemID, materialName, false);
+        }
+    }
+    // Cauldron end
+
     public static void addRecipe(ItemStack output, Object... params)
     {
         addShapedRecipe(output, params);
@@ -324,6 +441,11 @@
             try
             {
                 tracker.onPlayerChangedDimension(player);
+                // Cauldron start - update compassTarget to new world when changing dimensions or it will leave a reference to the last world object causing a memory leak
+                // This is required for mods that implement their own dimension transfer methods which bypass ServerConfigurationManager
+                EntityPlayerMP playermp = (EntityPlayerMP)player;
+                playermp.compassTarget = new Location(playermp.worldObj.getWorld(), playermp.posX, playermp.posY, playermp.posZ);
+                // Cauldron end
             }
             catch (Exception e)
             {
